{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"methodokta Documentation","text":"<p>Hello and welcome to the methodokta documentation. While we always want to provide the most comprehensive documentation possible, we thought you may find the below sections a helpful place to get started.</p> <ul> <li>The Getting Started section provides onboarding material</li> <li>The Development header is the best place to get started on developing on top of and with methodokta</li> <li>See the Docs section for a comprehensive rundown of methodokta capabilities</li> </ul>"},{"location":"index.html#about-methodokta","title":"About methodokta","text":"<p>methodokta provides security operators with powerful Okta enumeration capabilities, enabling them to gain comprehensive visibility into their Okta environments. Tailored for data-modeling and data-integration, methodokta can function independently as an interactive CLI, be integrated into broader security workflows, or be utilized within the Method Platform for enhanced identity and access management insights.</p> <p>The number of security-relevant Okta resources that methodokta can enumerate are constantly growing. For the most up to date listing, please see the documentation here</p> <p>To learn more about methodokta, please see the Documentation site for the most detailed information.</p>"},{"location":"index.html#quick-start","title":"Quick Start","text":""},{"location":"index.html#get-methodokta","title":"Get methodokta","text":"<p>For the full list of available installation options, please see the Installation page. For convenience, here are some of the most commonly used options:</p> <ul> <li><code>docker run methodsecurity/methodokta</code></li> <li><code>docker run ghcr.io/method-security/methodokta</code></li> <li>Download the latest binary from the Github Releases page</li> <li>Installation documentation</li> </ul>"},{"location":"index.html#authentication","title":"Authentication","text":"<p>Authentication can be done in 2 ways: 1. By setting the <code>--api-token</code> and <code>--domain</code> flags 2. Setting the <code>$OKTA_API_TOKEN</code> and <code>$OKTA_API_DOMAIN</code> env variables</p>"},{"location":"index.html#general-usage","title":"General Usage","text":"<pre><code>methodokta &lt;resource&gt; enumerate \n</code></pre>"},{"location":"index.html#examples","title":"Examples","text":"<pre><code>methodokta user enumerate\n</code></pre> <pre><code>methodokta group enumerate\n</code></pre>"},{"location":"index.html#contributing","title":"Contributing","text":"<p>Interested in contributing to methodokta? Please see our organization wide Contribution page.</p>"},{"location":"index.html#want-more","title":"Want More?","text":"<p>If you're looking for an easy way to tie methodokta into your broader cybersecurity workflows, or want to leverage some autonomy to improve your overall security posture, you'll love the broader Method Platform.</p> <p>For more information, visit us here</p>"},{"location":"index.html#community","title":"Community","text":"<p>methodoktais a Method Security open source project.</p> <p>Learn more about Method's open source source work by checking out our other projects here or our organization wide documentation here.</p> <p>Have an idea for a Tool to contribute? Open a Discussion here.</p>"},{"location":"community/community.html","title":"Contributing","text":"<p>For more information on how to get involved in the Method community, please see our organization wide documentation:</p> <ul> <li>Discussions</li> <li>Issues</li> <li>Pull Requests</li> </ul>"},{"location":"development/adding.html","title":"Adding a new capability","text":"<p>By design, methodokta breaks every unique K8s resource into its own top level command. If you are looking to add a brand new capability to the tool, you can take the following steps.</p> <ol> <li>Add a file to <code>cmd/</code> that corresponds to the sub-command name you'd like to add to the <code>methodokta</code> CLI</li> <li>You can use <code>cmd/user.go</code> as a template</li> <li>Your file needs to be a member function of the <code>methodokta</code> struct and should be of the form <code>Init&lt;cmd&gt;Command</code></li> <li>Add a new member to the <code>methodokta</code> struct in <code>cmd/root.go</code> that corresponsds to your command name. Remember, the first letter must be capitalized.</li> <li>Call your <code>Init</code> function from <code>main.go</code></li> <li>Add logic to your commands runtime and put it in its own package within <code>internal</code> (e.g., <code>internal/user</code>)</li> </ol>"},{"location":"development/principles.html","title":"Project Principles","text":""},{"location":"development/principles.html#pre-run-run-post-run","title":"Pre-run -&gt; Run -&gt; Post-run","text":"<p>In the root command, we set a <code>PersistentPreRunE</code> and <code>PersistentPostRunE</code> function that is responsible for initializing the output format and Signal data (in the pre-run) and then write that data in the proper format (in the post-run).</p> <p>Within the Run command that every command must implement, the output of the collected data needs to be written back to the struct's <code>OutputSignal.Content</code> value in order to be properly written out to the caller.</p>"},{"location":"development/principles.html#cmd-vs-internal","title":"Cmd vs Internal","text":"<p>By design, the functionality within each command should focus around parsing the variety of flags and options that the command may need to control capability, passing off all real logic into internal modules.</p>"},{"location":"development/setup.html","title":"Development Setup","text":""},{"location":"development/setup.html#adding-a-new-capability","title":"Adding a new capability","text":"<p>To add a new Okta capability to methodokta, providing new enumeration capabilities to security operators everywhere, please see the adding a new capability page.</p>"},{"location":"development/setup.html#setting-up-your-development-environment","title":"Setting up your development environment","text":"<p>If you've just cloned methodokta for the first time, welcome to the community! We use Palantir's godel to streamline local development and goreleaser to handle the heavy lifting on the release process.</p> <p>To get started with godel, you can run</p> <pre><code>./godelw verify\n</code></pre> <p>This will run a number of checks for us, including linters, tests, and license checks. We run this command as part of our CI pipeline to ensure the codebase is consistently passing tests.</p>"},{"location":"development/setup.html#building-the-cli","title":"Building the CLI","text":"<p>We can use godel to build our CLI locally by running</p> <pre><code>./godelw build\n</code></pre> <p>You should see output in <code>out/build/methodokta/&lt;version&gt;/&lt;os&gt;-&lt;arch&gt;/methodokta</code>.</p> <p>If you'd like to clean this output up, you can run</p> <pre><code>./godelw clean\n</code></pre>"},{"location":"development/setup.html#testing-releases-locally","title":"Testing releases locally","text":"<p>We can use goreleaser locally as well to test our builds. As methodokta uses cosign to sign our artifacts and Docker containers during our CI pipeline, we'll want to skip this step when running locally.</p> <pre><code>goreleaser release --snapshot --clean --skip sign\n</code></pre> <p>This should output binaries, distributable tarballs/zips, as well as docker images to your local machine's Docker registry.</p>"},{"location":"docs/application.html","title":"Application","text":"<p>The <code>methodokta application</code> family of commands provide information about an Okta instance's applications</p>"},{"location":"docs/application.html#enumerate","title":"Enumerate","text":"<p>The enumerate command will gather information about the applications in a given Organization.</p>"},{"location":"docs/application.html#usage","title":"Usage","text":"<pre><code>methodokta application enumerate\n</code></pre>"},{"location":"docs/application.html#help-text","title":"Help Text","text":"<p>```bash % methodokta application -h Audit and command Users</p> <p>Usage:   methodokta user [command]</p> <p>Available Commands:   enumerate   Enumerate Applications</p> <p>Flags:   -h, --help   help for application</p> <p>Global Flags:   -t, --apitoken string     Okta API Token   -d, --domain string        Okta Domain   -o, --output string        Output format (signal, json, yaml). Default value is signal (default \"signal\")   -f, --output-file string   Path to output file. If blank, will output to STDOUT   -q, --quiet                Suppress output   -v, --verbose              Verbose output   ```</p>"},{"location":"docs/device.html","title":"Device","text":"<p>The <code>methodokta device</code> family of commands provide information about an Okta instance's devices</p>"},{"location":"docs/device.html#enumerate","title":"Enumerate","text":"<p>The enumerate command will gather information about the devices in a given organization.</p>"},{"location":"docs/device.html#usage","title":"Usage","text":"<pre><code>methodokta device enumerate\n</code></pre>"},{"location":"docs/device.html#help-text","title":"Help Text","text":"<p>```bash % methodokta device -h Audit and command Users</p> <p>Usage:   methodokta device [command]</p> <p>Available Commands:   enumerate   Enumerate Devices</p> <p>Flags:   -h, --help   help for device</p> <p>Global Flags:   -t, --apitoken string     Okta API Token   -d, --domain string        Okta Domain   -o, --output string        Output format (signal, json, yaml). Default value is signal (default \"signal\")   -f, --output-file string   Path to output file. If blank, will output to STDOUT   -q, --quiet                Suppress output   -v, --verbose              Verbose output   ```</p>"},{"location":"docs/group.html","title":"Group","text":"<p>The <code>methodokta group</code> family of commands provide information about an Okta instance's groups</p>"},{"location":"docs/group.html#enumerate","title":"Enumerate","text":"<p>The enumerate command will gather information about the groups in a given organization.</p>"},{"location":"docs/group.html#usage","title":"Usage","text":"<pre><code>methodokta group enumerate\n</code></pre>"},{"location":"docs/group.html#help-text","title":"Help Text","text":"<p>```bash % methodokta group -h Audit and command Users</p> <p>Usage:   methodokta group [command]</p> <p>Available Commands:   enumerate   Enumerate Groups</p> <p>Flags:   -h, --help   help for group</p> <p>Global Flags:   -t, --apitoken string     Okta API Token   -d, --domain string        Okta Domain   -o, --output string        Output format (signal, json, yaml). Default value is signal (default \"signal\")   -f, --output-file string   Path to output file. If blank, will output to STDOUT   -q, --quiet                Suppress output   -v, --verbose              Verbose output   ```</p>"},{"location":"docs/org.html","title":"Org","text":"<p>The <code>methodokta org</code> family of commands provide information about an Okta organization</p>"},{"location":"docs/org.html#enumerate","title":"Enumerate","text":"<p>The enumerate command will gather information about the organization</p>"},{"location":"docs/org.html#usage","title":"Usage","text":"<pre><code>methodokta org enumerate\n</code></pre>"},{"location":"docs/org.html#help-text","title":"Help Text","text":"<p>```bash % methodokta org -h Audit and command Users</p> <p>Usage:   methodokta org [command]</p> <p>Available Commands:   enumerate   Enumerate Org</p> <p>Flags:   -h, --help   help for org</p> <p>Global Flags:   -t, --apitoken string     Okta API Token   -d, --domain string        Okta Domain   -o, --output string        Output format (signal, json, yaml). Default value is signal (default \"signal\")   -f, --output-file string   Path to output file. If blank, will output to STDOUT   -q, --quiet                Suppress output   -v, --verbose              Verbose output   ```</p>"},{"location":"docs/user.html","title":"User","text":"<p>The <code>methodokta user</code> family of commands provide information about an Okta instance's users</p>"},{"location":"docs/user.html#enumerate","title":"Enumerate","text":"<p>The enumerate command will gather information about the users in a given organization.</p>"},{"location":"docs/user.html#usage","title":"Usage","text":"<pre><code>methodokta user enumerate\n</code></pre>"},{"location":"docs/user.html#help-text","title":"Help Text","text":"<p>```bash % methodokta user -h Audit and command Users</p> <p>Usage:   methodokta user [command]</p> <p>Available Commands:   enumerate   Enumerate Users</p> <p>Flags:   -h, --help   help for user</p> <p>Global Flags:   -t, --apitoken string     Okta API Token   -d, --domain string        Okta Domain   -o, --output string        Output format (signal, json, yaml). Default value is signal (default \"signal\")   -f, --output-file string   Path to output file. If blank, will output to STDOUT   -q, --quiet                Suppress output   -v, --verbose              Verbose output   ```</p>"},{"location":"getting-started/basic-usage.html","title":"Basic Usage","text":"<p>Before you get started, you will need to export Okta credentials that you want methodOkta to utilize as environment variables. </p>"},{"location":"getting-started/basic-usage.html#binaries","title":"Binaries","text":"<p>Running as a binary means you don't need to do anything additional for methodokta to leverage the environment variables you have already exported. You can test that things are working properly by running:</p> <pre><code>methodokta user enumerate --api-token xxxx --domain myoktadomain\n</code></pre>"},{"location":"getting-started/basic-usage.html#docker","title":"Docker","text":"<p>Running an authenticated workflow with methodokta as a Docker container requires that you pass okta credentials to the container:</p> <pre><code>docker run -e OKTA_API_TOKEN=\"XXXX\" -e OKTA_DOMAIN=\"myoktadomain\" methodsecurity/methodokta\n</code></pre>"},{"location":"getting-started/installation.html","title":"Getting Started","text":"<p>If you are just getting started with methodokta, welcome! This guide will walk you through the process of going zero to one with the tool.</p>"},{"location":"getting-started/installation.html#installation","title":"Installation","text":"<p>methodokta is provided in several convenient form factors, including statically compiled binary images on a variety of architectures as well as a Docker image for both x86 and ARM machines.</p> <p>If you do not see an architecture that you require, please open a Discussion to propose adding it.</p>"},{"location":"getting-started/installation.html#binaries","title":"Binaries","text":"<p>methodokta currently supports statically compiled binaries across the following operating systems and architectures:</p> OS Architecture Linux 386 Linux arm (goarm 7) Linux amd64 Linux arm64 MacOS amd64 MacOS arm64 Windows amd64 <p>The latest binaries can be downloaded directly from Github.</p>"},{"location":"getting-started/installation.html#docker","title":"Docker","text":"<p>Docker images for methodokta are hosted in both Github Container Registry as well as on Docker Hub and can be pulled via:</p> <pre><code>docker pull ghcr.io/method-security/methodokta\n</code></pre> <pre><code>docker pull methodsecurity/methodokta\n</code></pre>"}]}